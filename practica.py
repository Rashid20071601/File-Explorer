# Импортируем библиотеку tkinter для создания графического интерфейса и модуль filedialog для работы с диалогом выбора файлов
import tkinter as tk
from tkinter import filedialog as fd
from tkinter import messagebox
import os  # Импортируем модуль os для работы с файловой системой

# Создаем главное окно приложения
window = tk.Tk()

def file_select():
    """
    Функция file_select вызывает диалог выбора файла и обрабатывает выбранный файл.
    Она отображает путь к файлу в текстовом элементе интерфейса и открывает файл в
    стандартной программе операционной системы.
    """
    # Открываем диалоговое окно для выбора файла, изначально показывая корневую директорию '/'
    filename = fd.askopenfilename(
        initialdir='/',  # Начальная директория для открытия диалога выбора файла
        title='Выберите файл',  # Название диалогового окна
        filetypes=(('Текстовый файл', '.txt'), ('Все файлы', '*'))  # Допустимые форматы файлов
    )

    # Добавляем путь к выбранному файлу в текстовое поле и выводим его на экран
    text['text'] = text['text'] + ' ' + filename

    # Открываем выбранный файл в стандартной программе операционной системы для данного типа файла
    os.startfile(filename)


# Задаем основные параметры окна
window.title('Проводник')  # Устанавливаем заголовок окна
window.geometry('450x200+150+150')  # Устанавливаем размер окна
window.configure(bg='#373737')  # Устанавливаем цвет фона окна
window.resizable(False, False)  # Запрещаем изменение размеров окна

# Создаем текстовую метку, которая будет отображать путь к выбранному файлу
text = tk.Label(
    window,  # Родительский элемент - главное окно
    text='Файл:',  # Текст, отображаемый по умолчанию
    width=65,  # Ширина метки
    height=5,  # Высота метки
    background='#373737',  # Цвет фона метки
    foreground='white'  # Цвет текста метки
)
text.grid(column=1, row=1)  # Размещаем метку в сетке окна

# Создаем кнопку для вызова функции выбора файла
button_select = tk.Button(
    window,  # Родительский элемент - главное окно
    width=20,  # Ширина кнопки
    height=3,  # Высота кнопки
    text='Выбрать файл',  # Текст на кнопке
    background='silver',  # Цвет фона кнопки
    command=file_select  # Команда, выполняемая при нажатии на кнопку
)
button_select.grid(column=1, row=2)  # Размещаем кнопку в сетке окна

# Создаем строку меню для окна с помощью метода Menu библиотеки tkinter
menu_bar = tk.Menu(window)  # Инициализация меню для окна
window.config(menu=menu_bar)  # Устанавливаем созданное меню как меню для окна

# Функция, которая отображает информационное окно с инструкцией по использованию программы
def show_menu():
    # messagebox.showinfo отображает модальное окно с информацией
    messagebox.showinfo("Информация", "Как пользоваться программой:\n\n"
                                      "1. Нажмите 'Выбрать файл', чтобы выбрать файл.\n"
                                      "2. Программа откроет выбранный файл в стандартной программе операционной системы.")

# Создаем подменю 'Help' в строке меню
help_menu = tk.Menu(menu_bar, tearoff=0)  # tearoff=0 предотвращает отделение меню от окна
menu_bar.add_cascade(label='Help', menu=help_menu)  # Добавляем подменю в основное меню
help_menu.add_command(label='Как пользоваться?', command=show_menu)  # Добавляем команду в подменю, которая вызывает show_menu

# Функция, которая отображает окно с информацией о программе
def show_info():
    # Создаем новое окно, которое будет отображаться поверх основного окна
    info_window = tk.Toplevel(window)  # Toplevel создает новое окно
    info_window.title("Информация")  # Заголовок окна
    info_window.geometry("300x150+230+180")  # Размер окна (ширина x высота)
    info_window.resizable(False, False)  # Окно нельзя изменять в размерах

    # Создаем метку с информацией и размещаем ее в окне
    info_label = tk.Label(info_window,
                          text="Автор: Mustafaev Rashid\n" "Версия 1.0",
                          padx=10,  # Отступы от краев родительского окна по горизонтали
                          pady=10)  # Отступы от краев родительского окна по вертикали
    info_label.pack()  # Размещаем метку в окне

# Создаем подменю 'Info' в строке меню
info_menu = tk.Menu(menu_bar, tearoff=0)  # Для подменю 'Info' также запрещаем отделение
menu_bar.add_cascade(label='Info', menu=info_menu)  # Добавляем подменю в строку меню
info_menu.add_command(label='О программе', command=show_info)  # Добавляем команду в подменю, которая вызывает show_info

# Запускаем главный цикл обработки событий tkinter, который позволяет программе реагировать на действия пользователя
window.mainloop()